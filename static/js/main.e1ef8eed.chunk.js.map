{"version":3,"sources":["logo.svg","graph/graph.js","graph/node.js","graph/salesmanTask.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PriorityQueue","this","_nodes","priority","key","push","sort","pop","a","b","length","graph","vertices","verticesCoordinates","name","coordinates","edges","x","y","Object","entries","keys","Map","nameFirst","list","x1","y1","nameSecond","weight","edgeId","join","has","x2","y2","edgeInfo","xCenter","parseInt","yCenter","set","start","finish","smallest","vertex","neighbor","alt","nodes","distances","previous","path","enqueue","Infinity","isEmpty","dequeue","concat","reverse","addVertex","B","C","M","A","E","K","F","G","I","D","H","J","L","SalesManWrapper","props","state","end","shortPath","handleSelectChange","bind","findShortPath","event","setState","target","value","shortestPath","className","getVertex","getEdges","getVertexName","onSelectChange","onSubmit","React","Component","Graph","map","nodeName","coordinate","includes","style","top","left","shortEdges","i","values","edge","id","SearchPath","onChangeSelect","preventDefault","options","onChange","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1ef8eed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","class PriorityQueue {\r\n    constructor() {\r\n        this._nodes = [];\r\n    }\r\n    enqueue(priority, key) {\r\n        this._nodes.push({key: key, priority: priority });\r\n        this.sort();\r\n    }\r\n    dequeue() {\r\n        return this._nodes.pop().key;\r\n    }\r\n    sort() {\r\n        this._nodes.sort((a, b) => b.priority - a.priority);\r\n    }\r\n    isEmpty() {\r\n        return !this._nodes.length;\r\n    }\r\n}\r\n\r\nclass Graph {\r\n    constructor() {\r\n        this.vertices = {};\r\n        this.verticesCoordinates = {};\r\n    }\r\n    addVertex(name, coordinates = {}, edges = {}) {\r\n        this.vertices[name] = edges;\r\n        let {x = \"0\", y = \"0\"} = coordinates; \r\n        this.verticesCoordinates[name] = {x, y};\r\n    }\r\n    getVertex() {\r\n        return Object.entries(this.verticesCoordinates);\r\n    }\r\n    getVertexName() {\r\n        return Object.keys(this.verticesCoordinates)\r\n    }\r\n    getEdges() {\r\n        let edges = new Map();\r\n        for(let [nameFirst, list] of Object.entries(this.vertices)){\r\n            let {x: x1, y: y1} = this.verticesCoordinates[nameFirst];\r\n            for(let [nameSecond, weight] of Object.entries(list)){\r\n                let edgeId = [nameFirst, nameSecond].sort().join()\r\n                if(!edges.has(edgeId)){\r\n                    let {x: x2, y: y2} = this.verticesCoordinates[nameSecond]\r\n                    let xCenter = 0, yCenter = 0;\r\n                    xCenter = (parseInt(x1) + parseInt(x2))/2 + \"%\";\r\n                    yCenter = (parseInt(y1) + parseInt(y2))/2 + \"%\";\r\n                    let edgeInfo = {\r\n                        name: edgeId,\r\n                        x1: x1,\r\n                        x2: x2,\r\n                        xCenter: xCenter,\r\n                        y1: y1,\r\n                        y2: y2,\r\n                        yCenter: yCenter,\r\n                        weight: weight,\r\n                    }\r\n                    edges.set(edgeId, edgeInfo);\r\n                }\r\n            }\r\n        }\r\n\r\n        return edges;\r\n    }\r\n    shortestPath (start, finish) {\r\n\r\n        var nodes = new PriorityQueue(),\r\n        distances = {},\r\n        previous = {},\r\n        path = [],\r\n        smallest, vertex, neighbor, alt;\r\n\r\n        for(vertex in this.vertices) {\r\n            if(vertex === start) {\r\n                distances[vertex] = 0;\r\n                nodes.enqueue(0, vertex);\r\n            } else {\r\n                distances[vertex] = Infinity;\r\n                nodes.enqueue(Infinity, vertex);\r\n            }\r\n\r\n            previous[vertex] = null;\r\n        }\r\n\r\n        while(!nodes.isEmpty()) {\r\n            smallest = nodes.dequeue();\r\n\r\n            if(smallest === finish) {\r\n                path = [];\r\n\r\n                while(previous[smallest]) {\r\n                    path.push(smallest);\r\n                    smallest = previous[smallest];\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            if(!smallest || distances[smallest] === Infinity){\r\n                continue;\r\n            }\r\n\r\n            for(neighbor in this.vertices[smallest]) {\r\n                alt = distances[smallest] + this.vertices[smallest][neighbor];\r\n\r\n                if(alt < distances[neighbor]) {\r\n                    distances[neighbor] = alt;\r\n                    previous[neighbor] = smallest;\r\n\r\n                    nodes.enqueue(alt, neighbor);\r\n                }\r\n            }\r\n        }\r\n\r\n        return path.concat(start).reverse();\r\n    }\r\n}\r\n\r\nexport {Graph};","import {Graph} from './graph.js';\r\n\r\nexport let graph = new Graph();\r\n\r\ngraph.addVertex('A', {x: \"20%\", y: \"20%\"}, {B: 5, C: 6, M: 3});\r\ngraph.addVertex('B', {x: \"25%\", y: \"40%\"}, {A: 5, C: 7, M: 12});\r\ngraph.addVertex('C', {x: \"40%\", y: \"30%\"}, {A: 6, B: 7, E: 3, K: 5});\r\ngraph.addVertex('D', {x: \"65%\", y: \"22%\"}, {E: 9, F: 10, G: 8, I: 11});\r\ngraph.addVertex('E', {x: \"50%\", y: \"38%\"}, {C: 3, D: 9, I: 7});\r\ngraph.addVertex('F', {x: \"75%\", y: \"52%\"}, {D: 10, G: 8});\r\ngraph.addVertex('G', {x: \"90%\", y: \"45%\"}, {D: 8, F: 8, H: 9});\r\ngraph.addVertex('H', {x: \"85%\", y: \"65%\"}, {G: 9, I: 12, J: 6});\r\ngraph.addVertex('I', {x: \"60%\", y: \"60%\"}, {D: 11, E: 7, H: 12, J: 3, K: 7});\r\ngraph.addVertex('J', {x: \"67%\", y: \"80%\"}, {H: 6, I: 3, K: 1, L: 10});\r\ngraph.addVertex('K', {x: \"42%\", y: \"62%\"}, {C: 5, I: 7, J: 1, L: 9});\r\ngraph.addVertex('L', {x: \"32%\", y: \"75%\"}, {J: 10, K: 9, M: 12});\r\ngraph.addVertex('M', {x: \"10%\", y: \"50%\"}, {A: 3, B: 12, L: 12,});\r\n","import React from 'react';\r\nimport {graph} from './node.js';\r\n\r\nexport class SalesManWrapper extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            start: 'A',\r\n            end: 'A',\r\n            shortPath: [],\r\n        };\r\n\r\n        this.handleSelectChange = this.handleSelectChange.bind(this);\r\n        this.findShortPath = this.findShortPath.bind(this);\r\n    }\r\n\r\n    handleSelectChange(event) {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n    findShortPath() {\r\n        let shortPath = graph.shortestPath(this.state.start, this.state.end);\r\n        this.setState({shortPath: shortPath});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper-block\">\r\n                <Graph\r\n                    nodes={graph.getVertex()}\r\n                    edges={graph.getEdges()}\r\n                    shortPath={this.state.shortPath}/>\r\n                <SearchPath nodes={graph.getVertexName()}\r\n                    start={this.state.start}\r\n                    end={this.state.end}\r\n                    onSelectChange={this.handleSelectChange}\r\n                    onSubmit={this.findShortPath}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Graph extends React.Component {\r\n    render() {\r\n        const nodes = this.props.nodes.map(([nodeName, coordinate]) => <div \r\n            key={nodeName}\r\n            className={this.props.shortPath.includes(nodeName) ? 'node red' : 'node'}\r\n            style={{top: coordinate.y, left: coordinate.x}}>\r\n                <span>\r\n                    {nodeName}\r\n                </span>\r\n            </div>);\r\n\r\n        let shortEdges = [];\r\n        for (let i = 0; i < this.props.shortPath.length - 1; i++) {\r\n            shortEdges.push([this.props.shortPath[i], this.props.shortPath[i+1]].sort().join());\r\n        }\r\n\r\n        const edges = [];\r\n        for (let edge of this.props.edges.values()) {\r\n            edges.push(<line\r\n                className={shortEdges.includes(edge.name) ? 'red' : ''}\r\n                x1={edge.x1}\r\n                y1={edge.y1}\r\n                x2={edge.x2}\r\n                y2={edge.y2}\r\n                key={edge.name} />);\r\n            edges.push(<text\r\n                x={edge.xCenter}\r\n                y={edge.yCenter}\r\n                key={edge.name + edge.weight}\r\n                >\r\n                {edge.weight}</text>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"graph-wrapper\">\r\n                {nodes}\r\n                <svg id=\"svg\">\r\n                    {edges}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SearchPath extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.onChangeSelect = this.onChangeSelect.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChangeSelect(event) {\r\n        this.props.onSelectChange(event);\r\n    }\r\n    \r\n    onSubmit(event) {\r\n        this.props.onSubmit();\r\n        event.preventDefault();\r\n    }    \r\n\r\n    render() {\r\n        const options = this.props.nodes.map((nodeName) => <option\r\n            value={nodeName}\r\n            key={nodeName}>\r\n            {nodeName}</option>),\r\n            start = this.props.start,\r\n            end = this.props.end;\r\n        \r\n        return (\r\n            <form onSubmit={this.onSubmit} className=\"form-wrapper\">\r\n                <label> Начальная точка: \r\n                    <select name=\"start\" value={start} onChange={this.onChangeSelect}>\r\n                        {options}\r\n                    </select>\r\n                </label>\r\n                <label> Конечная точка: \r\n                    <select name=\"end\" value={end} onChange={this.onChangeSelect}>\r\n                        {options}\r\n                    </select>\r\n                </label>\r\n                <input type=\"submit\" value=\"Найти\"/>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {SalesManWrapper} from './graph/salesmanTask.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SalesManWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}